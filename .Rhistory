sum(diag(t(a)%*%a))
sum(diag(t(b)%*%b))
library(pracma)
library(matlib)
n = 5
A = randortho(n)
v0 = A[,1]
v1 = A[,2]
v2 = A[,3]
e1 = A[,4]
e2 = A[,5]
B = randortho(n)
u1 = B[,1]
b1 = B[,3]
C = randortho(n)
u2 = C[,2]
b2 = C[,4]
X1 = 5*u1%*%t(v0) + 3*b1%*%t(v1)
X2 = 4*u2%*%t(v0) + 5*b2%*%t(v2)
M = rbind(t(v0), t(v0)%*%t(X1)%*%X1)
m = c(0,0)
result = echelon(M, m)
vv = cbind(
c(-result[1,2],c(1,0,0,0)),
c(-result[1,3],c(0,1,0,0)),
c(-result[1,4],c(0,0,1,0)),
c(-result[1,5],c(0,0,0,1))
)
a = X1%*%v0%*%t(v0)-5*u1%*%t(v0)
b = X1%*%vv%*%solve(t(vv)%*%vv)%*%t(vv)-3*b1%*%t(v1)
sum(diag(t(a)%*%a))
sum(diag(t(b)%*%b))
library(pracma)
library(matlib)
n = 5
A = randortho(n)
v0 = A[,1]
v1 = A[,2]
v2 = A[,3]
e1 = A[,4]
e2 = A[,5]
B = randortho(n)
u1 = B[,1]
b1 = B[,2]
C = randortho(n)
u2 = C[,1]
b2 = C[,2]
X1 = 5*u1%*%t(v0) + 3*b1%*%t(v1)
X2 = 4*u2%*%t(v0) + 5*b2%*%t(v2)
M = rbind(t(v0), t(v0)%*%t(X1)%*%X1)
m = c(0,0)
result = echelon(M, m)
vv = cbind(
c(-result[1,2],c(1,0,0,0)),
c(-result[1,3],c(0,1,0,0)),
c(-result[1,4],c(0,0,1,0)),
c(-result[1,5],c(0,0,0,1))
)
a = X1%*%v0%*%t(v0)-5*u1%*%t(v0)
b = X1%*%vv%*%solve(t(vv)%*%vv)%*%t(vv)-3*b1%*%t(v1)
sum(diag(t(a)%*%a))
sum(diag(t(b)%*%b))
library(pracma)
library(matlib)
n = 3
A = randortho(n)
v0 = A[,1]
v1 = A[,2]
v2 = A[,3]
B = randortho(n)
u1 = B[,1]
b1 = B[,2]
C = randortho(n)
u2 = C[,1]
b2 = C[,2]
X1 = 5*u1%*%t(v0) + 3*b1%*%t(v1)
X2 = 4*u2%*%t(v0) + 5*b2%*%t(v2)
M = rbind(t(v0), t(v0)%*%t(X1)%*%X1)
m = c(0,0)
result = echelon(M, m)
result
library(pracma)
library(matlib)
n = 5
A = randortho(n)
v0 = A[,1]
v1 = A[,2]
v2 = A[,3]
B = randortho(n)
u1 = B[,1]
b1 = B[,2]
C = randortho(n)
u2 = C[,1]
b2 = C[,2]
X1 = 5*u1%*%t(v0) + 3*b1%*%t(v1)
X2 = 4*u2%*%t(v0) + 5*b2%*%t(v2)
M = rbind(t(v0), t(v0)%*%t(X1)%*%X1)
m = c(0,0)
result = echelon(M, m)
vv = cbind(
c(-result[1,2],c(1,0,0,0)),
c(-result[1,3],c(0,1,0,0)),
c(-result[1,4],c(0,0,1,0)),
c(-result[1,5],c(0,0,0,1))
)
a = X1%*%v0%*%t(v0)-5*u1%*%t(v0)
b = X1%*%vv%*%solve(t(vv)%*%vv)%*%t(vv)-3*b1%*%t(v1)
sum(diag(t(a)%*%a))
sum(diag(t(b)%*%b))
n = 3
A = randortho(n)
v0 = A[,1]
v1 = A[,2]
v2 = A[,3]
B = randortho(n)
u1 = B[,1]
b1 = B[,2]
C = randortho(n)
u2 = C[,1]
b2 = C[,2]
X1 = 5*u1%*%t(v0) + 3*b1%*%t(v1)
X2 = 4*u2%*%t(v0) + 5*b2%*%t(v2)
M = rbind(t(v0), t(v0)%*%t(X1)%*%X1)
m = c(0,0)
result = echelon(M, m)
result
vv = cbind(
c(-result[1,2],c(1,0)),
c(-result[1,3],c(0,1))
)
vv
a = X1%*%v0%*%t(v0)-5*u1%*%t(v0)
b = X1%*%vv%*%solve(t(vv)%*%vv)%*%t(vv)-3*b1%*%t(v1)
sum(diag(t(a)%*%a))
sum(diag(t(b)%*%b))
library(pracma)
library(matlib)
n = 5
A = randortho(n)
v0 = A[,1]
v1 = A[,2]
v2 = A[,3]
e1 = A[,4]
e2 = A[,5]
B = randortho(n)
u1 = B[,1]
b1 = B[,2]
C = randortho(n)
u2 = C[,1]
b2 = C[,2]
r1 = rnorm(n)*0.01
r2 = rnorm(n)*0.01
E1 = r1%*%t(e1)
E2 = r2%*%t(e2)
X1 = 5*u1%*%t(v0) + 3*b1%*%t(v1) + E1
X2 = 4*u2%*%t(v0) + 5*b2%*%t(v2) + E2
M = rbind(t(v0), t(v0)%*%t(X1)%*%X1)
m = c(0,0)
result = echelon(M, m)
vv = cbind(
c(-result[,3],c(1,0,0)),
c(-result[,4],c(0,1,0)),
c(-result[,5],c(0,0,1))
)
a = X1%*%v0%*%t(v0)-5*u1%*%t(v0)
b = X1%*%vv%*%solve(t(vv)%*%vv)%*%t(vv)-3*b1%*%t(v1)
sum(diag(t(E1)%*%E1))
sum(diag(t(a)%*%a))
sum(diag(t(b)%*%b))
A
n = 3
A = randortho(n)
A
library(pracma)
library(matlib)
n = 3
A = randortho(n)
v0 = A[,1]
v1 = A[,2]
v2 = A[,3]
B = randortho(n)
u1 = B[,1]
b1 = B[,2]
C = randortho(n)
u2 = C[,1]
b2 = C[,2]
X1 = 5*u1%*%t(v0) + 3*b1%*%t(v1)
X2 = 4*u2%*%t(v0) + 5*b2%*%t(v2)
M = rbind(t(v0), t(v0)%*%t(X1)%*%X1)
m = c(0,0)
result = echelon(M, m)
vv = cbind(
c(-result[1,2],c(1,0)),
c(-result[1,3],c(0,1))
)
a = X1%*%v0%*%t(v0)-5*u1%*%t(v0)
b = X1%*%vv%*%solve(t(vv)%*%vv)%*%t(vv)-3*b1%*%t(v1)
sum(diag(t(a)%*%a))
sum(diag(t(b)%*%b))
J1hat = X1%*%v0%*%t(v0)
A1hat = X1%*%vv%*%solve(t(vv)%*%vv)%*%t(vv)
a = J1hat-5*u1%*%t(v0)
b = A1hat-3*b1%*%t(v1)
sum(diag(t(a)%*%a))
sum(diag(t(b)%*%b))
J1hat-5*u1%*%t(v0)
library(pracma)
library(matlib)
n = 5
A = randortho(n)
v0 = A[,1]
v1 = A[,2]
v2 = A[,3]
e1 = A[,4]
e2 = A[,5]
B = randortho(n)
u1 = B[,1]
b1 = B[,2]
C = randortho(n)
u2 = C[,1]
b2 = C[,2]
r1 = rnorm(n)*0.01
r2 = rnorm(n)*0.01
E1 = r1%*%t(e1)
E2 = r2%*%t(e2)
X1 = 5*u1%*%t(v0) + 3*b1%*%t(v1) + E1
X2 = 4*u2%*%t(v0) + 5*b2%*%t(v2) + E2
M = rbind(t(v0), t(v0)%*%t(X1)%*%X1)
m = c(0,0)
result = echelon(M, m)
vv = cbind(
c(-result[,3],c(1,0,0)),
c(-result[,4],c(0,1,0)),
c(-result[,5],c(0,0,1))
)
J1hat = X1%*%v0%*%t(v0)
A1hat = X1%*%vv%*%solve(t(vv)%*%vv)%*%t(vv)
a = J1hat-5*u1%*%t(v0)
b = A1hat-3*b1%*%t(v1)
sum(diag(t(E1)%*%E1))
sum(diag(t(a)%*%a))
sum(diag(t(b)%*%b))
setwd("~/JICO/")
devtools::document()
devtools::install("~/JICO/")
library(JICO)
set.seed(76)
X1 = mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the first group
X2 = mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the second group
X.list = list(X1, X2)
Y1 = matrix(rnorm(50))
Y2 = matrix(rnorm(50))
Y.list = list(Y1, Y2)
setwd("~/JICO/")
devtools::document()
devtools::install("~/JICO/")
library(JICO)
set.seed(76)
X1 = mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the first group
X2 = mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the second group
X.list = list(X1, X2)
Y1 = matrix(rnorm(50))
Y2 = matrix(rnorm(50))
Y.list = list(Y1, Y2)
setwd("~/JICO/")
devtools::document()
devtools::install("~/JICO/")
library(JICO)
set.seed(76)
X1 = mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the first group
X2 = mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the second group
X.list = list(X1, X2)
Y1 = matrix(rnorm(50))
Y2 = matrix(rnorm(50))
Y.list = list(Y1, Y2)
## Enumerate the combinations of hyperparameters to be tuned in a list:
cv.parameter.set = parameter.set.G_2(maxrankA = 1, maxrankJ = 1, gamma = 1e10)
library(JICO)
set.seed(76)
X1 = mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the first group
cv.continnum.iter
library(MASS)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, parameter.set = cv.parameter.set,
criteria = "min", nfold = 5, maxiter = 300,
)
set.seed(76)
X1 = mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the first group
X2 = mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the second group
X.list = list(X1, X2)
Y1 = matrix(rnorm(50))
Y2 = matrix(rnorm(50))
Y.list = list(Y1, Y2)
## Enumerate the combinations of hyperparameters to be tuned in a list:
cv.parameter.set = parameter.set.G_2(maxrankA = 1, maxrankJ = 1, gamma = 1e10)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, parameter.set = cv.parameter.set,
criteria = "min", nfold = 5, maxiter = 300,
)
ml.JICO = continuum.multigroup.iter(X.list, Y.list, gam=1e10, rankJ=1, rankA=c(1, 1), maxiter = 300, conv = 1e-7,
center.X = TRUE, scale.X = TRUE, center.Y = TRUE, scale.Y = TRUE, orthIndiv = FALSE,
)
rankMatrix
set.seed(76)
X1 = mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the first group
X2 = mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the second group
X.list = list(X1, X2)
Y1 = matrix(rnorm(50))
Y2 = matrix(rnorm(50))
Y.list = list(Y1, Y2)
## Enumerate the combinations of hyperparameters to be tuned in a list:
cv.parameter.set = parameter.set.G_2(maxrankA = 1, maxrankJ = 1, gamma = 1e10)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, parameter.set = cv.parameter.set,
criteria = "min", nfold = 5, maxiter = 300,
)
ml.JICO = continuum.multigroup.iter(X.list, Y.list, gam=1e10, rankJ=1, rankA=c(1, 1), maxiter = 300, conv = 1e-7,
center.X = TRUE, scale.X = TRUE, center.Y = TRUE, scale.Y = TRUE, orthIndiv = FALSE,
)
library(Matrix)
ml.JICO = continuum.multigroup.iter(X.list, Y.list, gam=1e10, rankJ=1, rankA=c(1, 1), maxiter = 300, conv = 1e-7,
center.X = TRUE, scale.X = TRUE, center.Y = TRUE, scale.Y = TRUE, orthIndiv = FALSE,
)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, parameter.set = cv.parameter.set,
criteria = "min", nfold = 5, maxiter = 300,
)
library(nleqslv)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, parameter.set = cv.parameter.set,
criteria = "min", nfold = 5, maxiter = 300,
)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, parameter.set = cv.parameter.set,
criteria = "min", nfold = 5, maxiter = 300,
)
## Enumerate the combinations of hyperparameters to be tuned in a list:
cv.parameter.set = parameter.set.G_2(maxrankA = 1, maxrankJ = 1, gamma = 1e10)
setwd("~/JICO/")
devtools::document()
devtools::install("~/JICO/")
set.seed(76)
X1 = mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the first group
X2 = mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the second group
X.list = list(X1, X2)
Y1 = matrix(rnorm(50))
Y2 = matrix(rnorm(50))
Y.list = list(Y1, Y2)
## Enumerate the combinations of hyperparameters to be tuned in a list:
cv.parameter.set = parameter.set.G_2(maxrankA = 1, maxrankJ = 1, gamma = 1e10)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, parameter.set = cv.parameter.set,
criteria = "min", nfold = 5, maxiter = 300,
)
setwd("~/JICO/")
devtools::document()
setwd("~/JICO/")
devtools::document()
devtools::install("~/JICO/")
setwd("~/JICO/")
devtools::document()
devtools::install("~/JICO/")
set.seed(76)
X1 = mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the first group
library(MASS)
library(rlist)
library(JICO)
library(Matrix)
library(nleqslv)
set.seed(76)
X1 = mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the first group
X2 = mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the second group
X.list = list(X1, X2)
Y1 = matrix(rnorm(50))
Y2 = matrix(rnorm(50))
Y.list = list(Y1, Y2)
## Enumerate the combinations of hyperparameters to be tuned in a list:
cv.parameter.set = parameter.set.G_2(maxrankA = 1, maxrankJ = 1, gamma = 1e10)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, parameter.set = cv.parameter.set,
criteria = "min", nfold = 5, maxiter = 300,
)
?SOLVE
X1 = MASS::mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the first group
setwd("~/JICO/")
devtools::document()
devtools::install("~/JICO/")
set.seed(76)
X1 = MASS::mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the first group
X2 = MASS::mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the second group
X.list = list(X1, X2)
Y1 = matrix(rnorm(50))
Y2 = matrix(rnorm(50))
Y.list = list(Y1, Y2)
## Enumerate the combinations of hyperparameters to be tuned in a list:
cv.parameter.set = parameter.set.G_2(maxrankA = 1, maxrankJ = 1, gamma = 1e10)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, parameter.set = cv.parameter.set,
criteria = "min", nfold = 5, maxiter = 300,
)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, parameter.set = cv.parameter.set,
criteria = "min", nfold = 5, maxiter = 300,
)
setwd("~/JICO/")
devtools::document()
devtools::install("~/JICO/")
set.seed(76)
X1 = MASS::mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the first group
X2 = MASS::mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the second group
X.list = list(X1, X2)
Y1 = matrix(rnorm(50))
Y2 = matrix(rnorm(50))
Y.list = list(Y1, Y2)
## Enumerate the combinations of hyperparameters to be tuned in a list:
cv.parameter.set = parameter.set.G_2(maxrankA = 1, maxrankJ = 1, gamma = 1e10)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, parameter.set = cv.parameter.set,
criteria = "min", nfold = 5, maxiter = 300,
)
setwd("~/JICO/")
devtools::document()
devtools::install("~/JICO/")
set.seed(76)
X1 = MASS::mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the first group
X2 = MASS::mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the second group
X.list = list(X1, X2)
Y1 = matrix(rnorm(50))
Y2 = matrix(rnorm(50))
Y.list = list(Y1, Y2)
## Enumerate the combinations of hyperparameters to be tuned in a list:
cv.parameter.set = parameter.set.G_2(maxrankA = 1, maxrankJ = 1, gamma = 1e10)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, parameter.set = cv.parameter.set,
criteria = "min", nfold = 5, maxiter = 300,
)
setwd("~/JICO/")
devtools::document()
devtools::install("~/JICO/")
set.seed(76)
X1 = MASS::mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the first group
X2 = MASS::mvrnorm(50, rep(0, 200), diag(200))          # Generate the observed covariate matrix of the second group
X.list = list(X1, X2)
Y1 = matrix(rnorm(50))
Y2 = matrix(rnorm(50))
Y.list = list(Y1, Y2)
## Enumerate the combinations of hyperparameters to be tuned in a list:
cv.parameter.set = parameter.set.G_2(maxrankA = 1, maxrankJ = 1, gamma = 1e10)
## fit the model and use CV to find the best parameters
cv.ml.JICO = cv.continnum.iter(X.list, Y.list, parameter.set = cv.parameter.set,
criteria = "min", nfold = 5, maxiter = 300,
)
ml.JICO = continuum.multigroup.iter(X.list, Y.list, gam=1e10, rankJ=1, rankA=c(1, 1), maxiter = 300, conv = 1e-7,
center.X = TRUE, scale.X = TRUE, center.Y = TRUE, scale.Y = TRUE, orthIndiv = FALSE,
)
parameter.set.G_2
devtools::document()
devtools::document()
?continuum.multigroup.iter.Rd
set.seed(76)
X1 = MASS::mvrnorm(50, rep(0, 200), diag(200)) # covariates of the first group
X2 = MASS::mvrnorm(50, rep(0, 200), diag(200)) # covariates of the second group
X.list = list(X1, X2)
Y1 = matrix(rnorm(50)) # responses for the first group
Y2 = matrix(rnorm(50)) # responses for the second group
Y.list = list(Y1, Y2)
cv.parameter.set = parameter.set.G_2(
maxrankA = 1, maxrankJ = 1, gamma = 1e10
) # enumerate the set of tuning parameters
library(JICO)
cv.parameter.set = parameter.set.G_2(
maxrankA = 1, maxrankJ = 1, gamma = 1e10
) # enumerate the set of tuning parameters
ml.JICO = continuum.multigroup.iter(
X.list, Y.list, gam=1e10, rankJ=1, rankA=c(1, 1),
maxiter = 300
)
devtools::document()
?cv.continnum.iter.Rd
devtools::document()
?cv.continnum.iter.Rd
?continuum.multigroup.iter
usethis::use_testthat(3)
use_test("continuum")
usethis::use_test("continuum")
setwd("~/JICO/")
devtools::document()
devtools::install("~/JICO/")
set.seed(76)
X1 = MASS::mvrnorm(50, rep(0, 200), diag(200)) # covariates of the first group
X2 = MASS::mvrnorm(50, rep(0, 200), diag(200)) # covariates of the second group
X.list = list(X1, X2)
Y1 = matrix(rnorm(50)) # responses for the first group
Y2 = matrix(rnorm(50)) # responses for the second group
Y.list = list(Y1, Y2)
ml.JICO = continuum.multigroup.iter(
X.list, Y.list, gam=1e10, rankJ=1, rankA=c(1, 1),
maxiter = 300
)
devtools::test()
expect_equal
cv.ml.JICO
setwd("~/JICO/")
devtools::document()
devtools::install("~/JICO/")
devtools::test()
expect_type
typeof(ml.JICO)
setwd("~/JICO/")
devtools::document()
devtools::install("~/JICO/")
devtools::test()
